---
- name: Create /usr/sap/kit directory
  file:
    path: "{{ hana_kit }}"
    state: directory
    mode: 0777

- name: Gather the package facts for Ansible controller
  package_facts:
    manager: auto
  delegate_to: localhost

- name: Check if rsync package is available on Ansible controller
  set_fact:
    rsync_found_controller: true
  when: "'rsync' in ansible_facts.packages"
  delegate_to: localhost

- name: Gather the package facts for Red Hat target
  package_facts:
    manager: auto
  when: ansible_facts['os_family'] == "RedHat"

- name: Gather the packages for Suse target
  shell:  zypper search -i --match-exact rsync
  args:
    warn: false
  register: rsync_search_result
  when: ansible_facts['os_family'] == "Suse"

- name: Check if rsync package is available on target
  set_fact:
    rsync_found_target: true
  when: ansible_facts['os_family'] == "RedHat" and "'rsync' in ansible_facts.packages" or ansible_facts['os_family'] == "Suse" and rsync_search_result.rc == 0

- name: Copy "{{ kit_saphana_file }}" kit to target using rsync
  synchronize:
    src: "{{ kit_saphana_file }}"
    dest: "{{ hana_kit }}"
    checksum: yes
  when: rsync_found_controller is defined and rsync_found_target is defined

- name: Copy "{{ kit_saphana_file }}" kit to target
  copy:
    src: "{{ kit_saphana_file }}"
    dest: "{{ hana_kit }}"
    owner: root
    group: root
    mode: 0777
  when: rsync_found_controller is not defined or rsync_found_target is not defined

- name: Extract "{{ hana_kit }}/{{ kit_saphana_file.split('/')[-1] }}" to target
  unarchive:
    src: "{{ hana_kit }}/{{ kit_saphana_file.split('/')[-1] }}"
    dest: "{{ hana_kit }}"
    remote_src: yes

- name: Cleanup
  file:
    path: "{{ hana_kit }}/{{ kit_saphana_file.split('/')[-1] }}"
    state: absent
...
